{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO+wh5Jb7DSxAUcOpnDvJBY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install tensorflow\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H0Cb_zFlDeds","executionInfo":{"status":"ok","timestamp":1725285928173,"user_tz":-330,"elapsed":5271,"user":{"displayName":"Kakaraparthi Satkeerthi","userId":"03198037907373383651"}},"outputId":"7edbf327-027d-4ba3-afff-5aa53146d1d0"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.17.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.6.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.11.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.1)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.32.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (71.0.4)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.12.2)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.64.1)\n","Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.17.0)\n","Requirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.4.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.1)\n","Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.26.4)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.44.0)\n","Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (13.8.0)\n","Requirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.0.8)\n","Requirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.12.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.8)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2024.7.4)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.0.4)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow) (2.1.5)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (2.16.1)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow) (0.1.2)\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","import string\n","\n","# Generate synthetic text data\n","def generate_text_data(length=100000):\n","    chars = list(string.ascii_letters + \" \")\n","    return ''.join(np.random.choice(chars, length))\n","\n","# Prepare the dataset\n","def prepare_data(text, seq_length=40):\n","    chars = sorted(list(set(text)))\n","    char_to_int = {c: i for i, c in enumerate(chars)}\n","    int_to_char = {i: c for i, c in enumerate(chars)}\n","\n","    X = []\n","    y = []\n","    for i in range(0, len(text) - seq_length):\n","        X.append([char_to_int[c] for c in text[i:i+seq_length]])\n","        y.append(char_to_int[text[i+seq_length]])\n","\n","    X = np.array(X)\n","    y = np.array(y)\n","\n","    # One-hot encode the inputs and outputs\n","    X = tf.keras.utils.to_categorical(X, num_classes=len(chars))\n","    y = tf.keras.utils.to_categorical(y, num_classes=len(chars))\n","\n","    return X, y, char_to_int, int_to_char\n","\n","# Build the model\n","def build_model(input_shape, num_classes):\n","    model = tf.keras.Sequential([\n","        tf.keras.layers.LSTM(128, input_shape=input_shape),\n","        tf.keras.layers.Dense(num_classes, activation='softmax')\n","    ])\n","    model.compile(optimizer='adam', loss='categorical_crossentropy')\n","    return model\n","\n","# Generate text with the model\n","def generate_text(model, seed_text, char_to_int, int_to_char, length=200):\n","    generated_text = seed_text\n","    for _ in range(length):\n","        X_pred = np.array([[char_to_int[c] for c in seed_text]])\n","        X_pred = tf.keras.utils.to_categorical(X_pred, num_classes=len(char_to_int))\n","\n","        prediction = model.predict(X_pred, verbose=0)\n","        next_char = int_to_char[np.argmax(prediction)]\n","\n","        seed_text += next_char\n","        seed_text = seed_text[1:]\n","        generated_text += next_char\n","\n","    return generated_text\n","\n","# Main script\n","text = generate_text_data()\n","seq_length = 40\n","X, y, char_to_int, int_to_char = prepare_data(text, seq_length)\n","\n","model = build_model((seq_length, len(char_to_int)), len(char_to_int))\n","model.fit(X, y, epochs=10, batch_size=128)\n","\n","# Generate new text\n","seed_text = \"The quick brown fox \"\n","print(generate_text(model, seed_text, char_to_int, int_to_char))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tDjLEkbQOIuW","executionInfo":{"status":"ok","timestamp":1725289578515,"user_tz":-330,"elapsed":861674,"user":{"displayName":"Kakaraparthi Satkeerthi","userId":"03198037907373383651"}},"outputId":"ce37ad2e-7ba4-4abd-b655-cb4cf6128d86"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m781/781\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 104ms/step - loss: 3.9713\n","Epoch 2/10\n","\u001b[1m781/781\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 105ms/step - loss: 3.9665\n","Epoch 3/10\n","\u001b[1m781/781\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 103ms/step - loss: 3.9622\n","Epoch 4/10\n","\u001b[1m781/781\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 102ms/step - loss: 3.9568\n","Epoch 5/10\n","\u001b[1m781/781\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 103ms/step - loss: 3.9518\n","Epoch 6/10\n","\u001b[1m781/781\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 103ms/step - loss: 3.9442\n","Epoch 7/10\n","\u001b[1m781/781\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 104ms/step - loss: 3.9359\n","Epoch 8/10\n","\u001b[1m781/781\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 103ms/step - loss: 3.9252\n","Epoch 9/10\n","\u001b[1m781/781\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 103ms/step - loss: 3.9137\n","Epoch 10/10\n","\u001b[1m781/781\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 103ms/step - loss: 3.8983\n","The quick brown fox GlNDJmeffIAAoAonnnBDYYhhhhWSSXUXkXEENtTrrWrrLRbRRFLDrQrLbLLLbLLbQcQItLLJLLKKGKGGErerMebqqSbqqS tGLLCWzYzPP qqSqnXddddxxxxxxccNNnnkkkYjjxxzuUEENZIPyyyAJWnddYYYhhhhhhBBDDYZDYaaZAAAerLLbLbLcKKKowwavLLAeA\n"]}]}]}