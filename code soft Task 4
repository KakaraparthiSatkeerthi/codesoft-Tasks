{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM3FtnkFkfewY1QxNACJknl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, classification_report\n","from sklearn.pipeline import Pipeline\n","from sklearn.model_selection import GridSearchCV"],"metadata":{"id":"6D8ipVtD0Ghj","executionInfo":{"status":"ok","timestamp":1725112912717,"user_tz":-330,"elapsed":3595,"user":{"displayName":"Kakaraparthi Satkeerthi","userId":"03198037907373383651"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["url = 'https://raw.githubusercontent.com/justmarkham/pycon-2016-tutorial/master/data/sms.tsv'\n","data = pd.read_csv(url, sep='\\t', header=None, names=['label', 'message'])"],"metadata":{"id":"ESj4WVUy0Lnu","executionInfo":{"status":"ok","timestamp":1725112923270,"user_tz":-330,"elapsed":517,"user":{"displayName":"Kakaraparthi Satkeerthi","userId":"03198037907373383651"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["data['label'] = data['label'].map({'spam': 1, 'ham': 0})"],"metadata":{"id":"j3w0J0cV0P7g","executionInfo":{"status":"ok","timestamp":1725112924815,"user_tz":-330,"elapsed":5,"user":{"displayName":"Kakaraparthi Satkeerthi","userId":"03198037907373383651"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["X = data['message']\n","y = data['label']"],"metadata":{"id":"bBQ2f1Oz01Ph","executionInfo":{"status":"ok","timestamp":1725112926292,"user_tz":-330,"elapsed":795,"user":{"displayName":"Kakaraparthi Satkeerthi","userId":"03198037907373383651"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"],"metadata":{"id":"8iz7_TRu06ah","executionInfo":{"status":"ok","timestamp":1725112927693,"user_tz":-330,"elapsed":10,"user":{"displayName":"Kakaraparthi Satkeerthi","userId":"03198037907373383651"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["pipelines = {\n","    'Naive Bayes': Pipeline([\n","        ('tfidf', TfidfVectorizer()),\n","        ('classifier', MultinomialNB())\n","    ]),\n","    'Logistic Regression': Pipeline([\n","        ('tfidf', TfidfVectorizer()),\n","        ('classifier', LogisticRegression())\n","    ]),\n","    'SVM': Pipeline([\n","        ('tfidf', TfidfVectorizer()),\n","        ('classifier', SVC(kernel='linear', probability=True))\n","    ])\n","}"],"metadata":{"id":"SakjwOuu1Aip","executionInfo":{"status":"ok","timestamp":1725112930030,"user_tz":-330,"elapsed":12,"user":{"displayName":"Kakaraparthi Satkeerthi","userId":"03198037907373383651"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["for name, pipeline in pipelines.items():\n","    pipeline.fit(X_train, y_train)\n","    y_pred = pipeline.predict(X_test)\n","    print(f\"---{name}---\")\n","    print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n","    print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n","    print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TvTWRk541G2d","executionInfo":{"status":"ok","timestamp":1725112939845,"user_tz":-330,"elapsed":8047,"user":{"displayName":"Kakaraparthi Satkeerthi","userId":"03198037907373383651"}},"outputId":"bde080f1-2600-4829-b9ff-d2ecb85ccd7c"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["---Naive Bayes---\n","Accuracy: 0.9629186602870813\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.96      1.00      0.98      1448\n","           1       1.00      0.72      0.84       224\n","\n","    accuracy                           0.96      1672\n","   macro avg       0.98      0.86      0.91      1672\n","weighted avg       0.96      0.96      0.96      1672\n","\n","\n","---Logistic Regression---\n","Accuracy: 0.9712918660287081\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.97      1.00      0.98      1448\n","           1       0.99      0.79      0.88       224\n","\n","    accuracy                           0.97      1672\n","   macro avg       0.98      0.90      0.93      1672\n","weighted avg       0.97      0.97      0.97      1672\n","\n","\n","---SVM---\n","Accuracy: 0.993421052631579\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.99      1.00      1.00      1448\n","           1       1.00      0.96      0.97       224\n","\n","    accuracy                           0.99      1672\n","   macro avg       0.99      0.98      0.99      1672\n","weighted avg       0.99      0.99      0.99      1672\n","\n","\n"]}]},{"cell_type":"code","source":["param_grid = {\n","    'classifier__C': [0.1, 1, 10, 100],\n","    'classifier__gamma': [1, 0.1, 0.01, 0.001]\n","}\n","grid_search = GridSearchCV(pipelines['SVM'], param_grid, cv=5, scoring='accuracy')\n","grid_search.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":151},"id":"cT815Q3N1My2","executionInfo":{"status":"ok","timestamp":1725113181167,"user_tz":-330,"elapsed":241334,"user":{"displayName":"Kakaraparthi Satkeerthi","userId":"03198037907373383651"}},"outputId":"edb78e55-cfe5-42db-f8e9-9b0a87157031"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=5,\n","             estimator=Pipeline(steps=[('tfidf', TfidfVectorizer()),\n","                                       ('classifier',\n","                                        SVC(kernel='linear',\n","                                            probability=True))]),\n","             param_grid={'classifier__C': [0.1, 1, 10, 100],\n","                         'classifier__gamma': [1, 0.1, 0.01, 0.001]},\n","             scoring='accuracy')"],"text/html":["<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n","             estimator=Pipeline(steps=[(&#x27;tfidf&#x27;, TfidfVectorizer()),\n","                                       (&#x27;classifier&#x27;,\n","                                        SVC(kernel=&#x27;linear&#x27;,\n","                                            probability=True))]),\n","             param_grid={&#x27;classifier__C&#x27;: [0.1, 1, 10, 100],\n","                         &#x27;classifier__gamma&#x27;: [1, 0.1, 0.01, 0.001]},\n","             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5,\n","             estimator=Pipeline(steps=[(&#x27;tfidf&#x27;, TfidfVectorizer()),\n","                                       (&#x27;classifier&#x27;,\n","                                        SVC(kernel=&#x27;linear&#x27;,\n","                                            probability=True))]),\n","             param_grid={&#x27;classifier__C&#x27;: [0.1, 1, 10, 100],\n","                         &#x27;classifier__gamma&#x27;: [1, 0.1, 0.01, 0.001]},\n","             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;tfidf&#x27;, TfidfVectorizer()),\n","                (&#x27;classifier&#x27;, SVC(kernel=&#x27;linear&#x27;, probability=True))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">TfidfVectorizer</label><div class=\"sk-toggleable__content\"><pre>TfidfVectorizer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;, probability=True)</pre></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["print(\"Best Parameters for SVM:\", grid_search.best_params_)\n","print(\"Best Score for SVM:\", grid_search.best_score_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a43ktYwM2ook","executionInfo":{"status":"ok","timestamp":1725113181168,"user_tz":-330,"elapsed":13,"user":{"displayName":"Kakaraparthi Satkeerthi","userId":"03198037907373383651"}},"outputId":"2d9c2bfa-0338-44ee-9887-9da73a7f21d5"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Best Parameters for SVM: {'classifier__C': 100, 'classifier__gamma': 1}\n","Best Score for SVM: 0.9853846153846154\n"]}]}]}